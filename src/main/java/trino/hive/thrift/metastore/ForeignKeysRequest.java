/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.trino.hive.thrift.metastore;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ForeignKeysRequest implements org.apache.thrift.TBase<ForeignKeysRequest, ForeignKeysRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ForeignKeysRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeignKeysRequest");

  private static final org.apache.thrift.protocol.TField PARENT_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_tbl_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FOREIGN_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreign_db_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FOREIGN_TBL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreign_tbl_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("catName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VALID_WRITE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("validWriteIdList", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ForeignKeysRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ForeignKeysRequestTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String parent_db_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String parent_tbl_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String foreign_db_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String foreign_tbl_name; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String catName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String validWriteIdList; // optional
  private long tableId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_DB_NAME((short)1, "parent_db_name"),
    PARENT_TBL_NAME((short)2, "parent_tbl_name"),
    FOREIGN_DB_NAME((short)3, "foreign_db_name"),
    FOREIGN_TBL_NAME((short)4, "foreign_tbl_name"),
    CAT_NAME((short)5, "catName"),
    VALID_WRITE_ID_LIST((short)6, "validWriteIdList"),
    TABLE_ID((short)7, "tableId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_DB_NAME
          return PARENT_DB_NAME;
        case 2: // PARENT_TBL_NAME
          return PARENT_TBL_NAME;
        case 3: // FOREIGN_DB_NAME
          return FOREIGN_DB_NAME;
        case 4: // FOREIGN_TBL_NAME
          return FOREIGN_TBL_NAME;
        case 5: // CAT_NAME
          return CAT_NAME;
        case 6: // VALID_WRITE_ID_LIST
          return VALID_WRITE_ID_LIST;
        case 7: // TABLE_ID
          return TABLE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAT_NAME,_Fields.VALID_WRITE_ID_LIST,_Fields.TABLE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("parent_db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("parent_tbl_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOREIGN_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreign_db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOREIGN_TBL_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreign_tbl_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT_NAME, new org.apache.thrift.meta_data.FieldMetaData("catName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_WRITE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("validWriteIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeignKeysRequest.class, metaDataMap);
  }

  public ForeignKeysRequest() {
    this.tableId = -1L;

  }

  public ForeignKeysRequest(
    java.lang.String parent_db_name,
    java.lang.String parent_tbl_name,
    java.lang.String foreign_db_name,
    java.lang.String foreign_tbl_name)
  {
    this();
    this.parent_db_name = parent_db_name;
    this.parent_tbl_name = parent_tbl_name;
    this.foreign_db_name = foreign_db_name;
    this.foreign_tbl_name = foreign_tbl_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeignKeysRequest(ForeignKeysRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetParentDbName()) {
      this.parent_db_name = other.parent_db_name;
    }
    if (other.isSetParentTblName()) {
      this.parent_tbl_name = other.parent_tbl_name;
    }
    if (other.isSetForeignDbName()) {
      this.foreign_db_name = other.foreign_db_name;
    }
    if (other.isSetForeignTblName()) {
      this.foreign_tbl_name = other.foreign_tbl_name;
    }
    if (other.isSetCatName()) {
      this.catName = other.catName;
    }
    if (other.isSetValidWriteIdList()) {
      this.validWriteIdList = other.validWriteIdList;
    }
    this.tableId = other.tableId;
  }

  @Override
  public ForeignKeysRequest deepCopy() {
    return new ForeignKeysRequest(this);
  }

  @Override
  public void clear() {
    this.parent_db_name = null;
    this.parent_tbl_name = null;
    this.foreign_db_name = null;
    this.foreign_tbl_name = null;
    this.catName = null;
    this.validWriteIdList = null;
    this.tableId = -1L;

  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentDbName() {
    return this.parent_db_name;
  }

  public ForeignKeysRequest setParentDbName(@org.apache.thrift.annotation.Nullable java.lang.String parent_db_name) {
    this.parent_db_name = parent_db_name;
    return this;
  }

  public void unsetParentDbName() {
    this.parent_db_name = null;
  }

  /** Returns true if field parent_db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetParentDbName() {
    return this.parent_db_name != null;
  }

  public void setParentDbNameIsSet(boolean value) {
    if (!value) {
      this.parent_db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getParentTblName() {
    return this.parent_tbl_name;
  }

  public ForeignKeysRequest setParentTblName(@org.apache.thrift.annotation.Nullable java.lang.String parent_tbl_name) {
    this.parent_tbl_name = parent_tbl_name;
    return this;
  }

  public void unsetParentTblName() {
    this.parent_tbl_name = null;
  }

  /** Returns true if field parent_tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetParentTblName() {
    return this.parent_tbl_name != null;
  }

  public void setParentTblNameIsSet(boolean value) {
    if (!value) {
      this.parent_tbl_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getForeignDbName() {
    return this.foreign_db_name;
  }

  public ForeignKeysRequest setForeignDbName(@org.apache.thrift.annotation.Nullable java.lang.String foreign_db_name) {
    this.foreign_db_name = foreign_db_name;
    return this;
  }

  public void unsetForeignDbName() {
    this.foreign_db_name = null;
  }

  /** Returns true if field foreign_db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignDbName() {
    return this.foreign_db_name != null;
  }

  public void setForeignDbNameIsSet(boolean value) {
    if (!value) {
      this.foreign_db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getForeignTblName() {
    return this.foreign_tbl_name;
  }

  public ForeignKeysRequest setForeignTblName(@org.apache.thrift.annotation.Nullable java.lang.String foreign_tbl_name) {
    this.foreign_tbl_name = foreign_tbl_name;
    return this;
  }

  public void unsetForeignTblName() {
    this.foreign_tbl_name = null;
  }

  /** Returns true if field foreign_tbl_name is set (has been assigned a value) and false otherwise */
  public boolean isSetForeignTblName() {
    return this.foreign_tbl_name != null;
  }

  public void setForeignTblNameIsSet(boolean value) {
    if (!value) {
      this.foreign_tbl_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCatName() {
    return this.catName;
  }

  public ForeignKeysRequest setCatName(@org.apache.thrift.annotation.Nullable java.lang.String catName) {
    this.catName = catName;
    return this;
  }

  public void unsetCatName() {
    this.catName = null;
  }

  /** Returns true if field catName is set (has been assigned a value) and false otherwise */
  public boolean isSetCatName() {
    return this.catName != null;
  }

  public void setCatNameIsSet(boolean value) {
    if (!value) {
      this.catName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getValidWriteIdList() {
    return this.validWriteIdList;
  }

  public ForeignKeysRequest setValidWriteIdList(@org.apache.thrift.annotation.Nullable java.lang.String validWriteIdList) {
    this.validWriteIdList = validWriteIdList;
    return this;
  }

  public void unsetValidWriteIdList() {
    this.validWriteIdList = null;
  }

  /** Returns true if field validWriteIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetValidWriteIdList() {
    return this.validWriteIdList != null;
  }

  public void setValidWriteIdListIsSet(boolean value) {
    if (!value) {
      this.validWriteIdList = null;
    }
  }

  public long getTableId() {
    return this.tableId;
  }

  public ForeignKeysRequest setTableId(long tableId) {
    this.tableId = tableId;
    setTableIdIsSet(true);
    return this;
  }

  public void unsetTableId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLEID_ISSET_ID);
  }

  public void setTableIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLEID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PARENT_DB_NAME:
      if (value == null) {
        unsetParentDbName();
      } else {
        setParentDbName((java.lang.String)value);
      }
      break;

    case PARENT_TBL_NAME:
      if (value == null) {
        unsetParentTblName();
      } else {
        setParentTblName((java.lang.String)value);
      }
      break;

    case FOREIGN_DB_NAME:
      if (value == null) {
        unsetForeignDbName();
      } else {
        setForeignDbName((java.lang.String)value);
      }
      break;

    case FOREIGN_TBL_NAME:
      if (value == null) {
        unsetForeignTblName();
      } else {
        setForeignTblName((java.lang.String)value);
      }
      break;

    case CAT_NAME:
      if (value == null) {
        unsetCatName();
      } else {
        setCatName((java.lang.String)value);
      }
      break;

    case VALID_WRITE_ID_LIST:
      if (value == null) {
        unsetValidWriteIdList();
      } else {
        setValidWriteIdList((java.lang.String)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_DB_NAME:
      return getParentDbName();

    case PARENT_TBL_NAME:
      return getParentTblName();

    case FOREIGN_DB_NAME:
      return getForeignDbName();

    case FOREIGN_TBL_NAME:
      return getForeignTblName();

    case CAT_NAME:
      return getCatName();

    case VALID_WRITE_ID_LIST:
      return getValidWriteIdList();

    case TABLE_ID:
      return getTableId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARENT_DB_NAME:
      return isSetParentDbName();
    case PARENT_TBL_NAME:
      return isSetParentTblName();
    case FOREIGN_DB_NAME:
      return isSetForeignDbName();
    case FOREIGN_TBL_NAME:
      return isSetForeignTblName();
    case CAT_NAME:
      return isSetCatName();
    case VALID_WRITE_ID_LIST:
      return isSetValidWriteIdList();
    case TABLE_ID:
      return isSetTableId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ForeignKeysRequest)
      return this.equals((ForeignKeysRequest)that);
    return false;
  }

  public boolean equals(ForeignKeysRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parent_db_name = true && this.isSetParentDbName();
    boolean that_present_parent_db_name = true && that.isSetParentDbName();
    if (this_present_parent_db_name || that_present_parent_db_name) {
      if (!(this_present_parent_db_name && that_present_parent_db_name))
        return false;
      if (!this.parent_db_name.equals(that.parent_db_name))
        return false;
    }

    boolean this_present_parent_tbl_name = true && this.isSetParentTblName();
    boolean that_present_parent_tbl_name = true && that.isSetParentTblName();
    if (this_present_parent_tbl_name || that_present_parent_tbl_name) {
      if (!(this_present_parent_tbl_name && that_present_parent_tbl_name))
        return false;
      if (!this.parent_tbl_name.equals(that.parent_tbl_name))
        return false;
    }

    boolean this_present_foreign_db_name = true && this.isSetForeignDbName();
    boolean that_present_foreign_db_name = true && that.isSetForeignDbName();
    if (this_present_foreign_db_name || that_present_foreign_db_name) {
      if (!(this_present_foreign_db_name && that_present_foreign_db_name))
        return false;
      if (!this.foreign_db_name.equals(that.foreign_db_name))
        return false;
    }

    boolean this_present_foreign_tbl_name = true && this.isSetForeignTblName();
    boolean that_present_foreign_tbl_name = true && that.isSetForeignTblName();
    if (this_present_foreign_tbl_name || that_present_foreign_tbl_name) {
      if (!(this_present_foreign_tbl_name && that_present_foreign_tbl_name))
        return false;
      if (!this.foreign_tbl_name.equals(that.foreign_tbl_name))
        return false;
    }

    boolean this_present_catName = true && this.isSetCatName();
    boolean that_present_catName = true && that.isSetCatName();
    if (this_present_catName || that_present_catName) {
      if (!(this_present_catName && that_present_catName))
        return false;
      if (!this.catName.equals(that.catName))
        return false;
    }

    boolean this_present_validWriteIdList = true && this.isSetValidWriteIdList();
    boolean that_present_validWriteIdList = true && that.isSetValidWriteIdList();
    if (this_present_validWriteIdList || that_present_validWriteIdList) {
      if (!(this_present_validWriteIdList && that_present_validWriteIdList))
        return false;
      if (!this.validWriteIdList.equals(that.validWriteIdList))
        return false;
    }

    boolean this_present_tableId = true && this.isSetTableId();
    boolean that_present_tableId = true && that.isSetTableId();
    if (this_present_tableId || that_present_tableId) {
      if (!(this_present_tableId && that_present_tableId))
        return false;
      if (this.tableId != that.tableId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParentDbName()) ? 131071 : 524287);
    if (isSetParentDbName())
      hashCode = hashCode * 8191 + parent_db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentTblName()) ? 131071 : 524287);
    if (isSetParentTblName())
      hashCode = hashCode * 8191 + parent_tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetForeignDbName()) ? 131071 : 524287);
    if (isSetForeignDbName())
      hashCode = hashCode * 8191 + foreign_db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetForeignTblName()) ? 131071 : 524287);
    if (isSetForeignTblName())
      hashCode = hashCode * 8191 + foreign_tbl_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCatName()) ? 131071 : 524287);
    if (isSetCatName())
      hashCode = hashCode * 8191 + catName.hashCode();

    hashCode = hashCode * 8191 + ((isSetValidWriteIdList()) ? 131071 : 524287);
    if (isSetValidWriteIdList())
      hashCode = hashCode * 8191 + validWriteIdList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableId()) ? 131071 : 524287);
    if (isSetTableId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tableId);

    return hashCode;
  }

  @Override
  public int compareTo(ForeignKeysRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetParentDbName(), other.isSetParentDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_db_name, other.parent_db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParentTblName(), other.isSetParentTblName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentTblName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_tbl_name, other.parent_tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForeignDbName(), other.isSetForeignDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreign_db_name, other.foreign_db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForeignTblName(), other.isSetForeignTblName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeignTblName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreign_tbl_name, other.foreign_tbl_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCatName(), other.isSetCatName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catName, other.catName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValidWriteIdList(), other.isSetValidWriteIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidWriteIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validWriteIdList, other.validWriteIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableId(), other.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ForeignKeysRequest(");
    boolean first = true;

    sb.append("parent_db_name:");
    if (this.parent_db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.parent_db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent_tbl_name:");
    if (this.parent_tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.parent_tbl_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreign_db_name:");
    if (this.foreign_db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.foreign_db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreign_tbl_name:");
    if (this.foreign_tbl_name == null) {
      sb.append("null");
    } else {
      sb.append(this.foreign_tbl_name);
    }
    first = false;
    if (isSetCatName()) {
      if (!first) sb.append(", ");
      sb.append("catName:");
      if (this.catName == null) {
        sb.append("null");
      } else {
        sb.append(this.catName);
      }
      first = false;
    }
    if (isSetValidWriteIdList()) {
      if (!first) sb.append(", ");
      sb.append("validWriteIdList:");
      if (this.validWriteIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.validWriteIdList);
      }
      first = false;
    }
    if (isSetTableId()) {
      if (!first) sb.append(", ");
      sb.append("tableId:");
      sb.append(this.tableId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeignKeysRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ForeignKeysRequestStandardScheme getScheme() {
      return new ForeignKeysRequestStandardScheme();
    }
  }

  private static class ForeignKeysRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ForeignKeysRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parent_db_name = iprot.readString();
              struct.setParentDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parent_tbl_name = iprot.readString();
              struct.setParentTblNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOREIGN_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreign_db_name = iprot.readString();
              struct.setForeignDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOREIGN_TBL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreign_tbl_name = iprot.readString();
              struct.setForeignTblNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catName = iprot.readString();
              struct.setCatNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALID_WRITE_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validWriteIdList = iprot.readString();
              struct.setValidWriteIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tableId = iprot.readI64();
              struct.setTableIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parent_db_name != null) {
        oprot.writeFieldBegin(PARENT_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.parent_db_name);
        oprot.writeFieldEnd();
      }
      if (struct.parent_tbl_name != null) {
        oprot.writeFieldBegin(PARENT_TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.parent_tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.foreign_db_name != null) {
        oprot.writeFieldBegin(FOREIGN_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.foreign_db_name);
        oprot.writeFieldEnd();
      }
      if (struct.foreign_tbl_name != null) {
        oprot.writeFieldBegin(FOREIGN_TBL_NAME_FIELD_DESC);
        oprot.writeString(struct.foreign_tbl_name);
        oprot.writeFieldEnd();
      }
      if (struct.catName != null) {
        if (struct.isSetCatName()) {
          oprot.writeFieldBegin(CAT_NAME_FIELD_DESC);
          oprot.writeString(struct.catName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.validWriteIdList != null) {
        if (struct.isSetValidWriteIdList()) {
          oprot.writeFieldBegin(VALID_WRITE_ID_LIST_FIELD_DESC);
          oprot.writeString(struct.validWriteIdList);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTableId()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.tableId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeignKeysRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ForeignKeysRequestTupleScheme getScheme() {
      return new ForeignKeysRequestTupleScheme();
    }
  }

  private static class ForeignKeysRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ForeignKeysRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentDbName()) {
        optionals.set(0);
      }
      if (struct.isSetParentTblName()) {
        optionals.set(1);
      }
      if (struct.isSetForeignDbName()) {
        optionals.set(2);
      }
      if (struct.isSetForeignTblName()) {
        optionals.set(3);
      }
      if (struct.isSetCatName()) {
        optionals.set(4);
      }
      if (struct.isSetValidWriteIdList()) {
        optionals.set(5);
      }
      if (struct.isSetTableId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetParentDbName()) {
        oprot.writeString(struct.parent_db_name);
      }
      if (struct.isSetParentTblName()) {
        oprot.writeString(struct.parent_tbl_name);
      }
      if (struct.isSetForeignDbName()) {
        oprot.writeString(struct.foreign_db_name);
      }
      if (struct.isSetForeignTblName()) {
        oprot.writeString(struct.foreign_tbl_name);
      }
      if (struct.isSetCatName()) {
        oprot.writeString(struct.catName);
      }
      if (struct.isSetValidWriteIdList()) {
        oprot.writeString(struct.validWriteIdList);
      }
      if (struct.isSetTableId()) {
        oprot.writeI64(struct.tableId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeignKeysRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.parent_db_name = iprot.readString();
        struct.setParentDbNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parent_tbl_name = iprot.readString();
        struct.setParentTblNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foreign_db_name = iprot.readString();
        struct.setForeignDbNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.foreign_tbl_name = iprot.readString();
        struct.setForeignTblNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.catName = iprot.readString();
        struct.setCatNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.validWriteIdList = iprot.readString();
        struct.setValidWriteIdListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tableId = iprot.readI64();
        struct.setTableIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

